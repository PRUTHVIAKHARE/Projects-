import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import pandas_datareader as data

start = '2016-01-01'
end = '2019-12-31'
df = data.DataReader('AAPL', 'yahoo', start, end)
# print(df.head())
# plt.plot(df.Close)
# plt.show()
na = df.Close.rolling(100).mean()
# print(na)
plt.figure(figsize=(12,6))
plt.plot(df.Close)
plt.plot(na,'r')
# plt.show()
# print(df.shape)
# splitting data into trainin and testing
data_training = pd.DataFrame(df['Close'][0:int(len(df)*0.70)])
data_testing = pd.DataFrame(df['Close'][int(len(df)*0.70): int(len(df))])
# print(data_training.shape)
# print(data_testing.shape)
# print(data_training.head())
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range=(0,1))
data_training_array = scaler.fit_transform(data_training)
# store data into array
x_train = []
y_train = []

for i in range(100,data_training_array.shape[0]):
    x_train.append(data_training_array[i-100:i])
    y_train.append(data_training_array[i,0])

# convert into numpy array
x_train,y_train = np.array(x_train), np.array(y_train)
from keras.layers import Dense, Dropout, LSTM
from keras.models import Sequential

model = Sequential()
model.add(LSTM(units = 50, activation= 'relu', return_sequences= True, input_shape=(x_train.shape[1], 1)))
model.add(Dropout(0.2))

model.add(LSTM(units = 60, activation= 'relu', return_sequences= True))
model.add(Dropout(0.3))

model.add(LSTM(units = 80, activation= 'relu', return_sequences= True))
model.add(Dropout(0.3))

model.add(LSTM(units = 120, activation= 'relu', return_sequences= True))
model.add(Dropout(0.4))

model.add(Dense(units=1))

print(model.summary())

model.compile(optimizer='adam', loss = 'mean_squared_error')
model.fit(x_train,y_train, epochs=50)


